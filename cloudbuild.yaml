substitutions:
  _PROJECT_ID: "capstoneproject-462618"
  _GCS_BUCKET_NAME: "capstone-nasa-wildfire-sal"

steps:
  # 1) Build & tag the training Docker image (explicit Dockerfile.train)
  - name: 'gcr.io/cloud-builders/docker'
    id: Build_Docker_Image
    args:
      - build
      - -f
      - Dockerfile.train        # point to your training Dockerfile
      - -t
      - us-central1-docker.pkg.dev/${_PROJECT_ID}/capstone/ml-model:${COMMIT_SHA}
      - .

  # 2) Push the image
  - name: 'gcr.io/cloud-builders/docker'
    id: Push_Docker_Image
    args:
      - push
      - us-central1-docker.pkg.dev/${_PROJECT_ID}/capstone/ml-model:${COMMIT_SHA}

  # 3) Submit Vertex AI custom training job and wait (sync)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Vertex_AI_Training
    entrypoint: bash
    args:
      - -c
      - |
        echo "=== Starting Vertex AI training (synchronous) ==="
        gcloud ai custom-jobs create \
          --region=us-central1 \
          --display-name=wildfire-train-${SHORT_SHA} \
          --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=us-central1-docker.pkg.dev/${_PROJECT_ID}/capstone/ml-model:${COMMIT_SHA} \
          --args="--bucket=${_GCS_BUCKET_NAME}" \
          --project=${_PROJECT_ID}

  # 4) Register the model in Vertex AI Model Registry
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Register_Model
    entrypoint: bash
    args:
      - -c
      - |
        echo "=== Registering model in Vertex AI ==="
        MODEL_NAME="wildfire-detection-model"
        MODEL_URI="gs://${_GCS_BUCKET_NAME}/model/tf_model/"
        IMAGE_URI="us-central1-docker.pkg.dev/${_PROJECT_ID}/capstone/ml-model:${COMMIT_SHA}"

        gcloud ai models upload \
          --region=us-central1 \
          --display-name="$$MODEL_NAME" \
          --artifact-uri="$$MODEL_URI" \
          --container-image-uri="$$IMAGE_URI" \
          --container-predict-route="/predict" \
          --container-health-route="/health" \
          --container-ports=8080 \
          --project=${_PROJECT_ID}

  # 5) Deploy the model to a Vertex AI Endpoint
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy_Model
    entrypoint: bash
    args:
      - -c
      - |
        echo "=== Deploying model to Vertex AI endpoint ==="
        MODEL_NAME="wildfire-detection-model"
        ENDPOINT_NAME="wildfire-prediction-endpoint"

        # Fetch model resource name
        MODEL_ID=$$(gcloud ai models list \
          --region=us-central1 \
          --filter="displayName:$$MODEL_NAME" \
          --format="value(name)" \
          --limit=1)

        # Create or retrieve the endpoint
        ENDPOINT_ID=$$(gcloud ai endpoints list \
          --region=us-central1 \
          --filter="displayName:$$ENDPOINT_NAME" \
          --format="value(name)" \
          --limit=1)
        if [ -z "$$ENDPOINT_ID" ]; then
          echo "Creating endpoint $$ENDPOINT_NAME..."
          ENDPOINT_ID=$$(gcloud ai endpoints create \
            --region=us-central1 \
            --display-name=$$ENDPOINT_NAME \
            --project=${_PROJECT_ID} \
            --format="value(name)")
        else
          echo "Using existing endpoint: $$ENDPOINT_ID"
        fi

        # Deploy model to endpoint
        gcloud ai endpoints deploy-model $$ENDPOINT_ID \
          --region=us-central1 \
          --model=$$MODEL_ID \
          --display-name="deployed-$$MODEL_NAME-${SHORT_SHA}" \
          --machine-type=n1-standard-2 \
          --min-replica-count=1 \
          --max-replica-count=1 \
          --traffic-split=0=100 \
          --project=${_PROJECT_ID}

# Declare the built image
images:
  - us-central1-docker.pkg.dev/${_PROJECT_ID}/capstone/ml-model:${COMMIT_SHA}

options:
  logging: CLOUD_LOGGING_ONLY